#ifndef _TRIPLET_H_
#define _TRIPLET_H_

#include <stdlib.h>
#include <stdio.h>

#define     TRUE        1
#define     FALSE       0
#define     OK          1
#define     ERROR       0
#define     INFEASIBLE  -1
#define     OVERFLOW    -2 

// Status 是函数的类型，其值是函数结果状态代码
typedef int Status;

// typedef int *Triplet;  // 由InitTriplet分配3个元素存储空间

// --------------基本操作的函数原型说明----------------

// 操作结果： 构造了三元组T，元素e1,e2和e3分别被赋予参数v1,v2和v3的值
//Status InitTriplet (Triplet &T, int v1, int v2, int v3);

// 操作结果：三元组T被销毁
//Status DestroyTriplet (Triplet &T);

// 初始条件：三元组T已存在， 1=<i<=3
// 操作结果：用e返回T的第i元的值
//Status Get (Triplet T, int i, int &e);

// 初始条件：三元组T已存在， 1=<i<=3
// 操作结果：改变T的第i元的值为e
//Status Put (Triplet &T, int i, int e);

// 初始条件：三元组T已存在
// 操作结果：如果T的3个元素按升序排列，则返回1，否则返回0
//Status IsAscending (Triplet T);


// 初始条件：三元组T已存在
// 操作结果：如果T的3个元素按降序排列，则返回1，否则返回0
//Status IsDescending (Triplet T);


// 初始条件：三元组T已存在
// 操作结果：用e返回T的3个元素中的最大值
//Status Max (Triplet T, int &e);

// 初始条件：三元组T已存在
// 操作结果：用e返回T的3个元素中的最小值
//Status Min (Triplet T, int &e);

/*
构造三元组T，依次置T的三个元素初值为v1 v2 v3
*/
Status InitTriplet (int *T, int v1, int v2, int v3)
{
    T = (int *)malloc(3 * sizeof(int));   //分配3个元素的存储空间
    if (!T) 
    {
        printf("T is NULL");
        exit(OVERFLOW); //分配存储空间失败
    }

    T[0] = v1;
    T[1] = v2;
    T[2] = v3;
    
    return OK;
}


Status DestroyTriplet (int *T)
{
    free(T);
    T = NULL;
    return OK;
}

Status Get (int *T, int i, int *e)
{
    if (i<1 || i>3) 
        return ERROR;
    *e = T[i-1] ;
    return OK;
}

Status Put (int *T, int i, int e)
{
    if (i<1 || i>3)
        return ERROR;
    T[i-1] = e;
    return OK;
}


Status IsAscending (int *T)
{
    return (T[0] <= T[1]) && (T[1] <= T[2]);
}


Status IsDescending (int *T) 
{
    return (T[0] >= T[1]) && (T[1] >= T[2]);
}

Status Max (int *T, int *e)
{
    e[0] = (T[0] >= T[1]) ? ((T[0] >= T[2]) ? T[0] : T[2]) 
                : ((T[1] >= T[2]) ? T[1] : T[2]);
    return OK;
}

Status Min (int *T, int *e)
{
    e[0] = (T[0] <= T[1]) ? ((T[0] <= T[2]) ? T[0] : T[2]) : ((T[1] <= T[2]) ? T[1] : T[2]);
    return OK;
}

#endif
